<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Labelle</title>
    <link rel="icon" href="img/core-img/favicon.ico">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .otp-container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 250px;
        }
        .otp-inputs {
            margin-bottom: 20px;
        }
        .otp-input {
            width: 40px;
            height: 40px;
            font-size: 18px;
            text-align: center;
            margin: 0 5px;
            border: 2px solid #ccc;
            border-radius: 4px;
        }
        #timer {
            font-size: 18px;
            margin-bottom: 10px;
        }
        #resendOtpBtn, #verify {
            padding: 10px 20px;
            background-color: #fbb710;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 10px;
        }
        #resendOtpBtn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #countdown {
            color: rgb(244, 219, 58);
            font-size: 15px;
        }
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 5px;
            font-size: 12px;
            margin-bottom: 20px;
        }
        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            padding: 10px;
            border-radius: 5px;
            font-size: 12px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="otp-container">
        <h2>Enter OTP</h2>
        <!-- OTP input fields -->
        <div id="message"></div>
        <div class="otp-inputs">
            <input type="text" id="otp-1" maxlength="1" class="otp-input" autofocus>
            <input type="text" id="otp-2" maxlength="1" class="otp-input">
            <input type="text" id="otp-3" maxlength="1" class="otp-input">
            <input type="text" id="otp-4" maxlength="1" class="otp-input">
        </div>
        <button id="verify" onclick="verifyOtp()">Verify OTP</button>
        <button id="resendOtpBtn" onclick="resendOtp()">Resend OTP</button>
        <p id="countdown"></p>
    </div>

    <script>
     const otpInputs = document.querySelectorAll('.otp-input');
const resendOtpBtn = document.getElementById('resendOtpBtn');
let countdown = 59;

function startCountdown() {
    resendOtpBtn.disabled = true;
    const countdownEl = document.getElementById('countdown');

    const interval = setInterval(() => {
        countdown -= 1;
        countdownEl.innerText = `You can resend OTP in ${countdown} seconds.`;

        if (countdown <= 0) {
            clearInterval(interval);
            countdownEl.innerText = '';
            resendOtpBtn.disabled = false;
            countdown = 59;
        }
    }, 1000);
}

async function resendOtp() {
    try {
        const response = await fetch('/resendforgotpasswordOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
        });
        
        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'OTP Resent',
                text: 'OTP resent successfully.',
                timer: 2000,
                showConfirmButton: false
            });
            startCountdown();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Resend Failed',
                text: result.message || 'Error resending OTP.'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error resending OTP. Please try again.'
        });
    }
}

async function verifyOtp() {
    const otp = Array.from(document.querySelectorAll('.otp-input'))
        .map(input => input.value.trim())
        .join('');

    if (otp.length !== 4) {
        Swal.fire({
            icon: 'warning',
            title: 'Invalid OTP',
            text: 'Please enter a 4-digit OTP.'
        });
        return;
    }

    try {
        const response = await fetch('/validateForgetPasswordOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ otp }),
        });

        if (!response.ok) {
            const errorResult = await response.json();
            Swal.fire({
                icon: 'error',
                title: 'Verification Failed',
                text: errorResult.message || 'Error verifying OTP.'
            });
            return;
        }

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Verified',
                text: result.message,
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = '/reset-password';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Invalid OTP',
                text: result.message || 'Invalid OTP. Please try again.'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again later.'
        });
        console.error('OTP Verification Error:', error);
    }
}

otpInputs.forEach((input, index) => {
    input.addEventListener('keyup', (e) => {
        if (e.target.value.trim() !== '') {
            if (index < otpInputs.length - 1) otpInputs[index + 1].focus();
        } else if (index > 0 && e.key === 'Backspace') {
            otpInputs[index - 1].focus();
        }
    });
});

startCountdown();

    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>
</html>
